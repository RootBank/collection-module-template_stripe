/*
  Rules which we would like to revert to their default state at some point
  but doing so may require lots of code changes so we are deferring for now.
  Please feel free to chip away at this list by:
  1. Removing/commenting a rule below.
  2. Run `npm run lint` to view errors.
  3. Fix all errors.
  4. Repeat.
 */
const rulesToRevertToDefaultsOverTime = {
  '@typescript-eslint/no-unused-vars': 'error',
  '@typescript-eslint/await-thenable': 'warn',
  '@typescript-eslint/no-floating-promises': 'warn',
  '@typescript-eslint/no-unnecessary-type-assertion': 'warn',
  '@typescript-eslint/no-unused-expressions': [
    'warn',
    { allowShortCircuit: true },
  ],
  'sonarjs/no-identical-expressions': 'warn',
  'sonarjs/no-identical-functions': 'warn',
  'unicorn/prefer-includes': 'warn',
  'unicorn/prefer-array-some': 'warn',
  'array-callback-return': 'warn',
  'unicorn/no-console-spaces': 'warn',
  'unicorn/consistent-function-scoping': 'warn',
  '@typescript-eslint/no-misused-promises': 'warn',
  '@typescript-eslint/no-empty-function': 'warn',
  '@typescript-eslint/require-await': 'warn',
  '@typescript-eslint/no-redeclare': 'warn',
  'no-useless-concat': 'warn',
  '@typescript-eslint/ban-types': 'warn',
  '@typescript-eslint/no-useless-constructor': 'warn',
  'default-case': 'warn',
  'consistent-return': 'warn',
  'no-empty-pattern': 'warn',
  'no-empty': 'warn',
  'no-return-assign': 'warn',
  'no-restricted-globals': 'warn',
  'operator-assignment': 'warn',
  'sonarjs/no-collapsible-if': 'warn',
  'sonarjs/no-duplicate-string': 'warn',
  'no-case-declarations': 'warn',
  'no-prototype-builtins': 'warn',
  'no-sequences': 'warn',
  'func-names': 'warn',
  '@typescript-eslint/restrict-template-expressions': 'warn',
  '@typescript-eslint/naming-convention': 'warn',
  'unicorn/prefer-ternary': 'warn',
  'sonarjs/prefer-single-boolean-return': 'warn',
  'sonarjs/no-gratuitous-expressions': 'warn',
  'sonarjs/no-nested-template-literals': 'warn',
  'sonarjs/no-ignored-return': 'warn',
  'sonarjs/no-nested-switch': 'warn',
  '@typescript-eslint/return-await': 'warn',
  'unicorn/prefer-module': 'warn',
  'unicorn/no-negated-condition': 'warn',
  'unicorn/prefer-spread': 'warn',
  'unicorn/no-array-push-push': 'warn',
  'unicorn/consistent-destructuring': 'warn',
  '@typescript-eslint/no-unsafe-argument': 'warn',
  'unicorn/switch-case-braces': 'off',
  'unicorn/prefer-node-protocol': 'off',
  'unicorn/no-array-for-each': 'warn',
  'unicorn/no-await-expression-member': 'warn',
  'unicorn/no-empty-file': 'warn',
  'unicorn/no-new-array': 'warn',
  'unicorn/no-static-only-class': 'warn',
  'unicorn/no-thenable': 'warn',
  'unicorn/no-typeof-undefined': 'warn',
  'unicorn/no-unnecessary-await': 'warn',
  'unicorn/no-useless-fallback-in-spread': 'warn',
  'unicorn/no-useless-promise-resolve-reject': 'warn',
  'unicorn/no-useless-spread': 'warn',
  'unicorn/no-useless-switch-case': 'warn',
  'unicorn/numeric-separators-style': 'off',
  'unicorn/prefer-array-flat': 'warn',
  'unicorn/prefer-code-point': 'warn',
  'unicorn/prefer-export-from': 'warn',
  'unicorn/prefer-logical-operator-over-ternary': 'warn',
  'unicorn/prefer-native-coercion-functions': 'warn',
  'unicorn/prefer-object-from-entries': 'off',
  'unicorn/prefer-prototype-methods': 'warn',
  'unicorn/prefer-regexp-test': 'warn',
  'unicorn/prefer-switch': 'warn',
  'unicorn/prefer-top-level-await': 'warn',
  'unicorn/text-encoding-identifier-case': 'warn',
  'unicorn/prefer-at': 'warn',
  'unicorn/prefer-string-replace-all': 'warn',

  // Rules which we do want to solve for and enable eventually, but are very noise for now and so we are disabling:
  'sonarjs/no-inverted-boolean-check': 'off',
  '@typescript-eslint/no-unsafe-assignment': 'off',
  '@typescript-eslint/no-unsafe-call': 'off',
  '@typescript-eslint/no-empty-interface': 'off',
  '@typescript-eslint/no-unsafe-member-access': 'off',
  '@typescript-eslint/no-unsafe-return': 'off',
  'no-restricted-syntax': 'off',
  '@typescript-eslint/no-for-in-array': 'off',
  '@typescript-eslint/no-loop-func': 'off',
  '@typescript-eslint/no-non-null-assertion': 'off',
  '@typescript-eslint/no-shadow': 'off',
  '@typescript-eslint/no-this-alias': 'off',
  '@typescript-eslint/no-throw-literal': 'off',
  '@typescript-eslint/no-use-before-define': 'off',
  '@typescript-eslint/prefer-regexp-exec': 'off',
  '@typescript-eslint/restrict-plus-operands': 'off',
  '@typescript-eslint/unbound-method': 'off',
  'class-methods-use-this': 'off',
  'guard-for-in': 'off',
  'import/export': 'off',
  'import/no-named-as-default': 'off',
  'no-await-in-loop': 'off',
  'sonarjs/no-small-switch': 'off',
  'unicorn/better-regex': 'off',
  'unicorn/explicit-length-check': 'off',
  'unicorn/new-for-builtins': 'off',
  'unicorn/no-fn-reference-in-iterator': 'off',
  'unicorn/no-for-loop': 'off',
  'unicorn/prefer-number-properties': 'off',
  'unicorn/prefer-optional-catch-binding': 'off',
  'unicorn/prefer-string-slice': 'off',
  'unicorn/prefer-trim-start-end': 'off',
  'unicorn/prevent-abbreviations': 'off',
  'unicorn/prefer-string-trim-start-end': 'off',
  'unicorn/no-abusive-eslint-disable': 'off',
  'unicorn/import-style': 'off',
  'unicorn/filename-case': 'off',
  '@typescript-eslint/no-var-require': 'off',
  '@typescript-eslint/no-var-requires': 'off',
  'import/no-dynamic-require': 'off',
  'global-require': 'off',
  'import/first': 'off',
};

if (process.env.NODE_ENV === 'test') {
  for (const key of Object.keys(rulesToRevertToDefaultsOverTime)) {
    rulesToRevertToDefaultsOverTime[key] = 'off';
  }
}

const rules = {
  '@typescript-eslint/ban-ts-comment': 'off',
  '@typescript-eslint/camelcase': 'off',
  '@typescript-eslint/comma-dangle': 'off',
  '@typescript-eslint/explicit-function-return-type': 'off',
  '@typescript-eslint/explicit-module-boundary-types': 'off',
  '@typescript-eslint/indent': 'off',
  '@typescript-eslint/lines-between-class-members': 'off',
  '@typescript-eslint/no-explicit-any': 'off',
  '@typescript-eslint/no-unnecessary-condition': 'warn',
  'arrow-body-style': 'off',
  'import/no-cycle': 'off',
  'import/prefer-default-export': 'off',
  'max-classes-per-file': 'off',
  'no-console': 'off',
  'no-nested-ternary': 'off',
  'no-param-reassign': 'off',
  'no-underscore-dangle': 'off',
  'mocha/no-exclusive-tests': 'error',
  'prettier/prettier': 'error',
  'sonarjs/cognitive-complexity': 'off',
  'unicorn/no-useless-undefined': 'off',
  'sonarjs/no-duplicated-branches': 'off',
  'sonarjs/no-redundant-boolean': 'off',
  'sonarjs/prefer-immediate-return': 'off',
  '@typescript-eslint/ban-ts-ignore': 'off',
  'unicorn/empty-brace-spaces': 'off',
  'unicorn/no-nested-ternary': 'off',
  'unicorn/no-null': 'off',
  'unicorn/no-reduce': 'off',
  'unicorn/no-array-callback-reference': 'off',
  'unicorn/no-array-reduce': 'off',
  'no-useless-escape': 'off',
  'sonarjs/max-switch-cases': 'off',
  'unicorn/number-literal-case': 'off',
  'no-fallthrough': 'off',
  'unicorn/no-process-exit': 'off',
  'no-continue': 'off',
  'no-void': 'off',
  'no-plusplus': 'off',
  radix: 'off',
  'unicorn/no-negated-condition': 'off',
  'no-extra-boolean-cast': 'off',
};

module.exports = {
  env: {
    es2020: true,
    node: true,
    mocha: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'airbnb-typescript/base',
    'plugin:unicorn/recommended',
    'plugin:sonarjs/recommended',
    'prettier',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 12,
    sourceType: 'module',
    createDefaultProgram: true,
    tsconfigRootDir: __dirname,
    project: './tsconfig.eslint.json',
  },
  plugins: [
    'prettier',
    'mocha',
    '@typescript-eslint',
    'unicorn',
    'sonarjs',
    'import',
  ],
  settings: {
    'mocha/additionalTestFunctions': ['describeModule'],
  },
  reportUnusedDisableDirectives: true,
  rules: {
    ...rules,
    ...rulesToRevertToDefaultsOverTime,
  },
  ignorePatterns: ['node_modules*/'],
  overrides: [
    {
      files: ['./**/*.js'],
      rules: {
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/no-unused-expressions': 'off',
        '@typescript-eslint/restrict-template-expressions': 'off',
        '@typescript-eslint/no-unsafe-argument': 'off',
        'import/extensions': 'off',
        'unicorn/prefer-module': 'off',
      },
    },
    {
      files: ['./**/http/**/*'],
      rules: {
        // Express handler requires return type of 'void', not 'Promise<void>'
        // making it impossible to use 'await' inside the handler without awkward workarounds / 'as' assertions
        // Should be solved by upgrading to Express 5: https://stackoverflow.com/a/71912991
        '@typescript-eslint/no-misused-promises': 'off',
      },
    },
  ],
};
